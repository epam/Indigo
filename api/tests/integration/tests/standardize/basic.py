import sys

sys.path.append("../../common")
from env_indigo import *

indigo = Indigo()
indigo.setOption("molfile-saving-skip-date", "1")
indigo.setOption("molfile-saving-mode", "2000")

print("****** Standardize stereo ********")
indigo.setOption("standardize-stereo", "true")

print("****** correct stereo ********")
mol = indigo.loadMolecule("[C@H](F)(Cl)(Br)")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

print("****** set ATOM_ANY for possible stereo ********")
mol = indigo.loadMolecule("C(F)(Cl)(Br)")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

print("****** clear invalid stereo ********")
indigo.setOption("ignore-stereochemistry-errors", "true")
mol = indigo.loadMolecule("[C@H](F)(Cl)(F)")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("ignore-stereochemistry-errors", "false")

print("****** set UnknownStereo for possible cis-trans stereo ********")
mol = indigo.loadMolecule("CC(N)=C(N)C(N)=C(C)N")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

indigo.setOption("standardize-stereo", "false")

print("****** standardize charges ********")
indigo.setOption("standardize-charges", "true")

print("case simple quaternary N")
mol = indigo.loadMolecule("N(C)(C)(C)[O-]")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

print("case quaternary-style aromatic N")
mol = indigo.loadMolecule("[O-][n]1ccccc1")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

print("case case nitro group")
mol = indigo.loadMolecule("CN(=O)=O")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

print("case double-bonded quaternary N")
mol = indigo.loadMolecule("CN(C)=C")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

print("case O with three attachments")
mol = indigo.loadMolecule("CO(C)C")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

print("case single-single O ")
mol = indigo.loadMolecule("COC")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

print("case X=O-C")
mol = indigo.loadMolecule("C[O]=C")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

print("case S with three attachments")
mol = indigo.loadMolecule("CS(C)C")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

print("case single-single S")
mol = indigo.loadMolecule("CSC")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

print("case X=S-C")
mol = indigo.loadMolecule("CS=C")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

print("case single X")
mol = indigo.loadMolecule("C.F")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

mol = indigo.loadMolecule("C.Cl")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

mol = indigo.loadMolecule("C.Br")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

mol = indigo.loadMolecule("C.I")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

indigo.setOption("standardize-charges", "false")

print("****** center molecule ********")
indigo.setOption("standardize-center-molecule", "true")
mol = indigo.loadMoleculeFromFile(joinPathPy("molecules/test.mol", __file__))
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-center-molecule", "false")

print("****** remove single atom fragments ********")
indigo.setOption("standardize-remove-single-atoms", "true")
mol = indigo.loadMolecule("NN.C.CC.CCC")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-remove-single-atoms", "false")

print("****** keep smallest fragment ********")
indigo.setOption("standardize-keep-smallest", "true")
mol = indigo.loadMolecule("NN.C.CC.CCC")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-keep-smallest", "false")

print("****** keep largest fragment ********")
indigo.setOption("standardize-keep-largest", "true")
mol = indigo.loadMolecule("NN.C.CC.CCC")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-keep-largest", "false")

print("****** remove largest fragment ********")
indigo.setOption("standardize-remove-largest", "true")
mol = indigo.loadMolecule("NN.C.CC.CCC")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-remove-largest", "false")

print("****** make all non-Hydrogen atoms to carbon atoms ********")
indigo.setOption("standardize-make-non-h-to-c-atoms", "true")
mol = indigo.loadMolecule("CN1C=NC(=C1)C(=O)O")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
mol = indigo.loadQueryMolecule("CN1C=*C(=C1)C(=O)O")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-make-non-h-to-c-atoms", "false")

print("****** make all non-Hydrogen atoms to the A query atom type ********")
indigo.setOption("standardize-make-non-h-to-a-atoms", "true")
mol = indigo.loadQueryMolecule("CN1C=*C(=C1)C(=O)O")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-make-non-h-to-a-atoms", "false")

print(
    "****** make all non-Hydrogen and non-Carbon atoms to the Q query atom type ********"
)
indigo.setOption("standardize-make-non-h-c-to-q-atoms", "true")
mol = indigo.loadQueryMolecule("CN1C=*C(=C1)C(=O)O")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-make-non-h-c-to-q-atoms", "false")

print("****** make all bonds single bonds ********")
indigo.setOption("standardize-make-all-bonds-single", "true")
mol = indigo.loadMolecule("CN1C=NC(=C1)C(=O)O")
print(mol.molfile())
mol.standardize()
print(mol.molfile())

mol = indigo.loadQueryMolecule("C*1C=NC(=C1)C(=O)O")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-make-all-bonds-single", "false")

print("****** clear coordinates ********")
indigo.setOption("standardize-clear-coordinates", "true")
mol = indigo.loadMoleculeFromFile(joinPathPy("molecules/test.mol", __file__))
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-clear-coordinates", "false")

print("****** straighten triple bonds ********")
indigo.setOption("standardize-straighten-triple-bonds", "true")
mol = indigo.loadMoleculeFromFile(
    joinPathPy("molecules/test-triple.mol", __file__)
)
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-straighten-triple-bonds", "false")

print("****** straighten allenes ********")
indigo.setOption("standardize-straighten-allens", "true")
mol = indigo.loadMoleculeFromFile(
    joinPathPy("molecules/test-allene.mol", __file__)
)
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-straighten-allens", "false")

print("****** clear molecule ********")
indigo.setOption("standardize-clear-molecule", "true")
mol = indigo.loadMoleculeFromFile(
    joinPathPy("molecules/test-allene.mol", __file__)
)
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-clear-molecule", "false")

print("****** clear stereo ********")
indigo.setOption("standardize-clear-stereo", "true")
mol = indigo.loadMolecule("[C@H](F)(Cl)(Br)")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-clear-stereo", "false")

print("****** clear all relative stereo groupings ********")
indigo.setOption("standardize-clear-enhanced-stereo", "true")
mol = indigo.loadMolecule("CC[C@H](C)CC[C@@H](C)[C@H](C)CC")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-clear-enhanced-stereo", "false")

print(
    "****** make all atoms and bonds marked UnknownStereo to NoStereo ********"
)
indigo.setOption("standardize-clear-unknown-stereo", "true")
mol = indigo.loadMolecule("[H]C1(O)c2ccnn2[C@@H](O)c2ccnn12 |r,w:1.0,1.1|")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-clear-unknown-stereo", "false")

print("****** make all atoms marked UnknownStereo to NoStereo ********")
indigo.setOption("standardize-clear-unknown-atom-stereo", "true")
mol = indigo.loadMolecule("[H]C1(O)c2ccnn2[C@@H](O)c2ccnn12 |r,w:1.0,1.1|")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-clear-unknown-atom-stereo", "false")

print("****** make all bonds marked UnknownStereo to NoStereo ********")
indigo.setOption("standardize-clear-unknown-bond-stereo", "true")
mol = indigo.loadMolecule("C\\C(N)=C(N)/C(N)=C(/C)N")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-clear-unknown-bond-stereo", "false")


print("****** set stereo from coordinates ********")
print("****** from 3D coordinates ********")
indigo.setOption("standardize-stereo-from-coordinates", "true")
indigo.setOption("skip-3d-chirality", "true")
mol = indigo.loadMoleculeFromFile(
    joinPathPy("molecules/3D-stereo.mol", __file__)
)
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("skip-3d-chirality", "false")
indigo.setOption("standardize-stereo-from-coordinates", "false")

print("****** from 2D coordinates ********")
indigo.setOption("standardize-stereo-from-coordinates", "true")
indigo.setOption("skip-3d-chirality", "true")
mol = indigo.loadMoleculeFromFile(
    joinPathPy("molecules/2D-stereo.mol", __file__)
)
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("skip-3d-chirality", "false")
indigo.setOption("standardize-stereo-from-coordinates", "false")

print("****** reposition stereo bonds to best position ********")
indigo.setOption("standardize-reposition-stereo-bonds", "true")
indigo.setOption("skip-3d-chirality", "true")
mol = indigo.loadMoleculeFromFile(
    joinPathPy("molecules/2D-stereo.mol", __file__)
)
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("skip-3d-chirality", "false")
indigo.setOption("standardize-reposition-stereo-bonds", "false")

print("****** reposition axial stereo bonds to best position ********")
indigo.setOption("standardize-reposition-axial-stereo-bonds", "true")
indigo.setOption("skip-3d-chirality", "true")
mol = indigo.loadMoleculeFromFile(
    joinPathPy("molecules/cis-trans-stereo.mol", __file__)
)
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("skip-3d-chirality", "false")
indigo.setOption("standardize-reposition-axial-stereo-bonds", "false")

print("****** fix direction of wedge bonds ********")
indigo.setOption("standardize-fix-direction-wedge-bonds", "true")
indigo.setOption("ignore-stereochemistry-errors", "true")
indigo.setOption("skip-3d-chirality", "true")
mol = indigo.loadMolecule(
    "CC(=O)N[C@@H]1[C@@H](O)C[C@@](O)(O[C@H]1[C@H](O)[C@H](O)CO)C(O)=O"
)
mol.layout()
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("skip-3d-chirality", "false")
indigo.setOption("ignore-stereochemistry-errors", "false")
indigo.setOption("standardize-fix-direction-wedge-bonds", "false")

print("****** clear charges ********")
indigo.setOption("standardize-clear-charges", "true")
mol = indigo.loadMolecule("[CH++][CH--]")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-clear-charges", "false")

print("****** clear isotopes ********")
indigo.setOption("standardize-clear-isotopes", "true")
mol = indigo.loadMolecule("C[13CH3]")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-clear-isotopes", "false")

print("****** neutralize directly bonded zwitterions ********")
indigo.setOption("standardize-neutralize-zwitterions", "true")
mol = indigo.loadMolecule("[CH++][CH--]")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
mol = indigo.loadMolecule("[CH+][CH-]")
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-neutralize-zwitterions", "false")


indigo.setOption("molfile-saving-mode", "3000")

print("****** clear zero-order dative type bonds ********")
indigo.setOption("standardize-clear-dative-bonds", "true")
mol = indigo.loadMoleculeFromFile(
    joinPathPy("molecules/ferrocene.mol", __file__)
)
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-clear-dative-bonds", "false")

print("****** clear zero-order hydrogen type bonds ********")
indigo.setOption("standardize-clear-hydrogen-bonds", "true")
mol = indigo.loadMoleculeFromFile(joinPathPy("molecules/h_bond.mol", __file__))
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-clear-hydrogen-bonds", "false")

print("****** create zero-order coordination bonds ********")
indigo.setOption("standardize-create-dative-bonds", "true")
mol = indigo.loadMoleculeFromFile(
    joinPathPy("molecules/wrong_complex.mol", __file__)
)
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-create-dative-bonds", "false")

print("****** create zero-order hydrogen type bonds ********")
indigo.setOption("standardize-create-hydrogen-bonds", "true")
mol = indigo.loadMoleculeFromFile(
    joinPathPy("molecules/wrong_h_bond.mol", __file__)
)
print(mol.molfile())
mol.standardize()
print(mol.molfile())
indigo.setOption("standardize-create-hydrogen-bonds", "false")
