name: Indigo CI

on:
  push:
    branches:
      - master
    tags:
      - 'indigo-*'
  workflow_dispatch:
  pull_request:

jobs:
  build_linux:
    runs-on: ubuntu-latest
    container: epmlsop/buildpack-centos7:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Build native libs
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release --target all before-bindings -- -j $(nproc)
      - name: Test native libs
        run: |
          cd build
          ctest --verbose
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: indigo-libs-linux
          path: dist
  build_windows_msvc:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Build native libs
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release --target ALL_BUILD before-bindings
      - name: Test native libs
        run: |
          cd build
          ctest -C Release --verbose
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: indigo-libs-windows
          path: dist
  build_windows_mingw:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - uses: msys2/setup-msys2@v2
        with:
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-make mingw-w64-x86_64-cmake git
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Build native libs
        run: |
          mkdir build
          cd build
          cmake .. -G "MinGW Makefiles"
          cmake --build . --config Release --target all before-bindings -- -j $(nproc) --output-sync
      - name: Test native libs
        run: |
          cd build
          ctest --verbose
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: indigo-libs-windows-mingw
          path: dist
  build_macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Build native libs
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release --target all before-bindings -- -j $(nproc)
      - name: Test native libs
        run: |
          cd build
          ctest --verbose
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: indigo-libs-macos
          path: dist
  build_indigo_wasm_ketcher:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags
      - name: Install Emcripten SDK
        uses: mymindstorm/setup-emsdk@v7
      - name: Build Indigo Ketcher WASM
        run: |
          mkdir build
          cd build
          emcmake cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --target indigo-ketcher-js-test -- -j $(nproc)
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: indigo-ketcher-js
          path: build/lib/libindigo-ketcher.js
  build_wrappers:
    runs-on: ubuntu-latest
    needs: [build_linux, build_windows_msvc, build_macos]
    container: epmlsop/indigo-tester:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Create folder for native libs
        run: mkdir dist
      - name: Download Linux native libs
        uses: actions/download-artifact@v2
        with:
          name: indigo-libs-linux
          path: dist/
      - name: Download Windows native libs
        uses: actions/download-artifact@v2
        with:
          name: indigo-libs-windows
          path: dist/
      - name: Download macOS native libs
        uses: actions/download-artifact@v2
        with:
          name: indigo-libs-macos
          path: dist/
      - name: Build wrappers
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release --target bindings
          ls -alh ../dist
      - name: Upload native shared libs
        uses: actions/upload-artifact@v2
        with:
          name: indigo-native-shared-libs
          path: |
            dist/lib
      - name: Upload test wrappers for Python
        uses: actions/upload-artifact@v2
        with:
          name: indigo-python
          path: |
            dist/*.whl   
      - name: Upload test wrappers for Java
        uses: actions/upload-artifact@v2
        with:
          name: indigo-java
          path: dist/*.jar
      - name: Upload test wrappers for .NET
        uses: actions/upload-artifact@v2
        with:
          name: indigo-dotnet
          path: dist/*.nupkg
  test_indigo_python_linux:
    runs-on: ubuntu-latest
    needs: build_wrappers
    container: epmlsop/indigo-tester:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Create folder for native libs
        run: mkdir dist
      - name: Download wrappers
        uses: actions/download-artifact@v2
        with:
          name: indigo-python
          path: dist/
      - name: Install wrapers
        run: python3 -m pip install dist/*linux*.whl
      - name: Test
        run: python3 api/tests/integration/test.py -j junit_report.xml -e todo || true
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v1
        with:
          report_paths: 'junit_report.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: "Linux Python Test Report"
  test_indigo_python_windows:
    runs-on: windows-latest
    needs: build_wrappers
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Create folder for native libs
        run: mkdir dist
      - name: Download wrappers
        uses: actions/download-artifact@v2
        with:
          name: indigo-python
          path: dist/
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          architecture: 'x64'
      - name: Install wrapers
        run: Get-ChildItem dist -Filter *win*.whl -Recurse | % { python3 -m pip install $_.FullName }
      - name: Test
        run: python3 api/tests/integration/test.py -j junit_report.xml -e todo || true
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v1
        with:
          report_paths: 'junit_report.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: "Windows Python Test Report"
  test_indigo_python_macos:
    runs-on: macos-latest
    needs: build_wrappers
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Create folder for native libs
        run: mkdir dist
      - name: Download wrappers
        uses: actions/download-artifact@v2
        with:
          name: indigo-python
          path: dist/
      - name: Install wrapers
        run: python3 -m pip install dist/*macos*.whl
      - name: Test
        run: python3 api/tests/integration/test.py -j junit_report.xml -e todo || true
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v1
        with:
          report_paths: 'junit_report.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: "macOS Python Test Report"
  #  test_linux_java:
  #   runs-on: ubuntu-latest
  #   needs: build_wrappers
  #   container: epmlsop/indigo-tester:latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         lfs: true
  #         fetch-depth: 500
  #     - name: Git fetch tags
  #       run: git fetch --tags -f
  #     - name: Create folder for native libs
  #       run: mkdir dist
  #     - name: Download wrappers
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: indigo-java
  #         path: dist/
  #     - name: Install Indigo jars
  #       run: find dist -name "*.jar" -not -name "*javadoc*" -not -name "*sources*" -exec mvn org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file -Dfile={} \;
  #     - name: Test
  #       run: jython api/tests/integration/test.py -j junit_report.xml -e todo || true
  #     - name: Publish Test Report
  #       uses: mikepenz/action-junit-report@v1
  #       with:
  #         report_paths: 'junit_report.xml'
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         check_name: "Linux Java Test Report"
  # test_linux_dotnet:
  #   runs-on: ubuntu-latest
  #   needs: build_wrappers
  #   container: epmlsop/indigo-tester:latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         lfs: true
  #         fetch-depth: 500
  #     - name: Git fetch tags
  #       run: git fetch --tags -f
  #     - name: Create folder for native libs
  #       run: mkdir dist
  #     - name: Download wrappers
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: indigo-test-wrappers-dotnet
  #         path: dist/
  #     - name: Test
  #       run: ipy -X:ExceptionDetail api/tests/python/test.py -j junit_report.xml -e todo || true
  #     - name: Publish Test Report
  #       uses: mikepenz/action-junit-report@v1
  #       with:
  #         report_paths: 'junit_report.xml'
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         check_name: "Linux .NET Test Report"

  test_bingo_elastic_python_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]
    needs: build_wrappers
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          lfs: true
          fetch-depth: 500
      - name: Create folder for native libs
        run: mkdir dist
      - name: Download wrappers
        uses: actions/download-artifact@v2
        with:
          name: indigo-python
          path: dist/
      - name: Install poetry
        run: pip install poetry
      - name: Install latest indigo version
        run: poetry run pip install ${GITHUB_WORKSPACE}/dist/epam.indigo-*manylinux1_x86_64.whl
        working-directory: bingo/bingo-elastic/python
      - name: Install dependencies
        run: poetry install
        working-directory: bingo/bingo-elastic/python
      - name: Run pylint
        run: poetry run pylint bingo_elastic
        working-directory: bingo/bingo-elastic/python
      - name: Setup elasticsearch
        run: docker run -d -p 9200:9200 --env "discovery.type=single-node" --env "opendistro_security.disabled=true" --env "indices.query.bool.max_clause_count=4096" amazon/opendistro-for-elasticsearch:latest
      - name: Wait elastic is ready
        run: sleep 30s
      - name: Run tests
        run: poetry run pytest tests
        working-directory: bingo/bingo-elastic/python

  test_bingo_elastic_java_linux:
    runs-on: ubuntu-latest
    needs: build_wrappers
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Download wrappers
        uses: actions/download-artifact@v2
        with:
          name: indigo-java
          path: dist/
      - name: Install Indigo jars
        run: find dist -name "*.jar" -not -name "*javadoc*" -not -name "*sources*" -exec mvn org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file -Dfile={} \;
      - name: Build bingo-elastic
        run: mvn -B --file pom.xml -Dmaven.repo.local=~/.m2/repository clean test
        working-directory: bingo/bingo-elastic/java

#  publish:
#    if: startsWith(github.ref, 'refs/tags/indigo-')
#    runs-on: ubuntu-latest
#    needs: [test_linux_python, test_linux_java, test_linux_dotnet, test_windows_python, test_macos_python]
#    container: epmlsop/indigo-tester:latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          lfs: true
#          fetch-depth: 500
#      - name: Git fetch tags
#        run: git fetch --tags -f
#      - name: Create folder for native libs
#        run: mkdir dist
#      - name: Download native shared libraries
#        uses: actions/download-artifact@v2
#        with:
#          name: indigo-native-shared-libs
#          path: dist/
#      - name: Update Wrappers version
#        run: python3 build_scripts/indigo-update-version.py
#      - name: Publish Python wheels to PyPI
#        env:
#          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
#        run: python3 build_scripts/indigo-make-by-libs.py --type=python --wrappers-arch=universal --publish
#      - name: Publish Java jars to Maven Central
#        env:
#          MAVEN_SETTINGS: ${{ secrets.MAVEN_SETTINGS }}
#          MAVEN_USER: ${{ secrets.MAVEN_USER }}
#          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
#          GPG_PRIVATE_KEY: ${{ secrets.MK_GPG_PRIVATE_KEY }}
#          GPG_PASSPHRASE: ${{ secrets.MK_GPG_PASSPHRASE }}
#        run: |
#          set -eux
#          apt install -y gnupg
#          mkdir /root/.m2
#          echo ${MAVEN_SETTINGS} > /root/.m2/settings.xml
#          echo ${GPG_PRIVATE_KEY} > gpg.key
#          gpg --batch --import gpg.key
#          rm gpg.key
#          python3 build_scripts/indigo-make-by-libs.py --type=java --wrappers-arch=universal --publish
#      - name: Publish .NET nupkg to Nuget
#        env:
#          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
#        run: python3 build_scripts/indigo-make-by-libs.py --type=dotnet --wrappers-arch=universal --publish
