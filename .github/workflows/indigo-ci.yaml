name: Indigo CI

env:
  OS_NAME_MAPPING_JSON: '{"ubuntu": "linux", "windows": "windows", "macos": "macos"}'

on:
  push:
    branches:
      - master
      - indigo-1.5
    tags:
      - 'indigo-*'
  workflow_dispatch:
  pull_request:
  repository_dispatch:

jobs:
  build_indigo_libs_x86_64:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos, ubuntu, windows ]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: false
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Build Linux
        if: ${{ matrix.os == 'ubuntu' }}
        uses: docker://epmlsop/buildpack-centos7:latest
        with:
          args: >
            /bin/sh -c "
            mkdir build &&
            cd build &&
            cmake .. -DBUILD_INDIGO=ON -DBUILD_INDIGO_WRAPPERS=OFF -DBUILD_INDIGO_UTILS=OFF &&
            cmake --build . --config Release --target all -- -j $(nproc) &&
            ctest --verbose
            "
      - name: Build macOS
        if: ${{ matrix.os == 'macos' }}
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_INDIGO=ON -DBUILD_INDIGO_WRAPPERS=OFF -DBUILD_INDIGO_UTILS=OFF
          cmake --build . --config Release --target all -- -j $(sysctl -n hw.logicalcpu)
          ctest --verbose
      - name: Build Windows
        if: ${{ matrix.os == 'windows' }}
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_INDIGO=ON -DBUILD_INDIGO_WRAPPERS=OFF -DBUILD_INDIGO_UTILS=OFF
          cmake --build . --config Release --target ALL_BUILD
          ctest --verbose -C Release
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: indigo-libs-${{ fromJSON(env.OS_NAME_MAPPING_JSON)[matrix.os] }}-x86_64
          path: dist

  build_indigo_wrappers:
    strategy:
      fail-fast: false
      matrix:
        wrapper: [ python, java, dotnet ]
    runs-on: ubuntu-latest
    needs: [ build_indigo_libs_x86_64 ]
    container: epmlsop/indigo-tester:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Create folder for native libs
        run: mkdir dist
      - name: Download Linux native libs
        uses: actions/download-artifact@v2
        with:
          name: indigo-libs-linux-x86_64
          path: dist/
      - name: Download Windows native libs
        uses: actions/download-artifact@v2
        with:
          name: indigo-libs-windows-x86_64
          path: dist/
      - name: Download macOS native libs
        uses: actions/download-artifact@v2
        with:
          name: indigo-libs-macos-x86_64
          path: dist/
      - name: Build wrappers
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_INDIGO=OFF -DBUILD_INDIGO_UTILS=OFF
          cmake --build . --config Release --target indigo-${{ matrix.wrapper }}
          ls -alh ../dist
      - name: Upload native shared libs
        uses: actions/upload-artifact@v2
        with:
          name: indigo-native-shared-libs
          path: |
            dist/lib
      - name: Upload Python wrappers
        if: ${{ matrix.wrapper == 'python' }}
        uses: actions/upload-artifact@v2
        with:
          name: indigo-python
          path: |
            dist/*.whl
      - name: Upload Java wrappers
        if: ${{ matrix.wrapper == 'java' }}
        uses: actions/upload-artifact@v2
        with:
          name: indigo-java
          path: dist/*.jar
      - name: Upload .NET wrappers
        if: ${{ matrix.wrapper == 'dotnet' }}
        uses: actions/upload-artifact@v2
        with:
          name: indigo-dotnet
          path: dist/*.nupkg

  test_indigo_python_x86_64:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos, ubuntu, windows ]
    runs-on: ${{ matrix.os }}-latest
    needs: build_indigo_wrappers
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Create folder for native libs
        run: mkdir dist
      - name: Download wrappers
        uses: actions/download-artifact@v2
        with:
          name: indigo-python
          path: dist/
      - name: Install Pillow
        run: python3 -m pip install Pillow
      - name: Install wrappers Linux
        if: ${{ matrix.os == 'ubuntu' }}
        run: python3 -m pip install dist/*linux*.whl
      - name: Install wrappers Windows
        if: ${{ matrix.os == 'windows' }}
        run: Get-ChildItem dist -Filter *win*.whl -Recurse | % { python3 -m pip install $_.FullName }
      - name: Install wrappers macOS
        if: ${{ matrix.os == 'macos' }}
        run: python3 -m pip install dist/*macos*.whl
      - name: Test
        run: python3 api/tests/integration/test.py -j junit_report.xml -e todo
      - name: Publish Test Report
        if: always()
        uses: mikepenz/action-junit-report@v1
        with:
          report_paths: 'junit_report.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: "${{ matrix.os }}_python_test_report"

  test_indigo_java_x86_64:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos, ubuntu, windows ]
    runs-on: ${{ matrix.os }}-latest
    needs: build_indigo_wrappers
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Create folder for native libs
        run: mkdir dist
      - name: Download wrappers
        uses: actions/download-artifact@v2
        with:
          name: indigo-java
          path: dist/
      - name: Install Jython
        run: |
          curl -L https://repo1.maven.org/maven2/org/python/jython-standalone/2.7.2/jython-standalone-2.7.2.jar -o jython.jar
      - name: Test
        env:
          INDIGO_PATH: ${{ github.workspace }}/dist
        run: |
          env || echo failed
          echo ${env:INDIGO_PATH} || echo failed
          ls ${env:INDIGO_PATH} || echo failed
          echo ${INDIGO_PATH} || echo failed
          ls ${INDIGO_PATH} || echo failed
          java -Xss4m -jar jython.jar api/tests/integration/test.py -j junit_report.xml -e todo,part_test,render_rgroups
      - name: Publish Test Report
        if: always()
        uses: mikepenz/action-junit-report@v1
        with:
          report_paths: 'junit_report.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: "${{ matrix.os }}_java_test_report"

  test_indigo_dotnet_x86_64:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos, ubuntu, windows ]
    runs-on: ${{ matrix.os }}-latest
    needs: build_indigo_wrappers
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Create folder for native libs
        run: mkdir dist
      - name: Download wrappers
        uses: actions/download-artifact@v2
        with:
          name: indigo-dotnet
          path: dist/
      - name: Prepare Common
        run: |
          mkdir IronPython
          mkdir tmp
          cd IronPython
          curl -OL https://github.com/IronLanguages/ironpython2/releases/download/ipy-2.7.11/IronPython.2.7.11.zip
      - name: Prepare UNIX
        if: ${{ matrix.os != 'windows' }}
        run: |
          cd IronPython
          unzip IronPython.2.7.11.zip
          cd ../tmp
          unzip ../dist/Indigo.Net.*.nupkg
          chmod -R a+rw .
      - name: Prepare macOS
        if: ${{ matrix.os == 'macos' }}
        run: |
          brew install mono-libgdiplus
      - name: Prepare Linux
        if: ${{ matrix.os == 'ubuntu' }}
        run: |
          sudo apt install -y libgdiplus
      - name: Prepare Windows
        if: ${{ matrix.os == 'windows' }}
        run: |
          cd IronPython
          Expand-Archive IronPython.2.7.11.zip .
          cd ../tmp
          Expand-Archive ../dist/Indigo.Net.*.nupkg .
      - name: Test Linux
        if: ${{ matrix.os == 'ubuntu' }}
        env:
          INDIGO_PATH: ${{ github.workspace }}/tmp/lib/netstandard2.0/Indigo.Net.dll
          LD_LIBRARY_PATH: ${{ github.workspace }}/tmp/runtimes/linux-x64/native
        run: |
          dotnet IronPython/netcoreapp3.1/ipy.dll -X:ExceptionDetail api/tests/integration/test.py -j junit_report.xml -e todo,part_test,render_rgroups
      - name: Test macOS
        if: ${{ matrix.os == 'macos' }}
        env:
          INDIGO_PATH: ${{ github.workspace }}/tmp/lib/netstandard2.0/Indigo.Net.dll
        run: |
          export DYLD_LIBRARY_PATH=${PWD}/tmp/runtimes/osx-x64/native
          dotnet IronPython/netcoreapp3.1/ipy.dll -X:ExceptionDetail api/tests/integration/test.py -j junit_report.xml -e todo,part_test,render_rgroups -platform mac
      - name: Test Windows
        if: ${{ matrix.os == 'windows' }}
        env:
          INDIGO_PATH: ${{ github.workspace }}/tmp/lib/netstandard2.0/Indigo.Net.dll
          PATH: ${{ env.PATH }};${{ github.workspace }}/tmp/runtimes/win-x64/native
        run: ./IronPython/net45/ipy.exe -X:ExceptionDetail api/tests/integration/test.py -j junit_report.xml -e todo,render_rgroups -platform ironwin
      - name: Publish Test Report
        if: always()
        uses: mikepenz/action-junit-report@v1
        with:
          report_paths: 'junit_report.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: "${{ matrix.os }}_dotnet_test_report"

  test_bingo_elastic_python_linux_x86_64:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]
    needs: build_indigo_wrappers
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          lfs: true
          fetch-depth: 500
      - name: Create folder for native libs
        run: mkdir dist
      - name: Download wrappers
        uses: actions/download-artifact@v2
        with:
          name: indigo-python
          path: dist/
      - name: Install poetry
        run: pip install poetry
      - name: Install latest indigo version
        run: poetry run pip install ${GITHUB_WORKSPACE}/dist/epam.indigo-*manylinux1_x86_64.whl
        working-directory: bingo/bingo-elastic/python
      - name: Install dependencies
        run: poetry install
        working-directory: bingo/bingo-elastic/python
      - name: Run pylint
        run: poetry run pylint bingo_elastic
        working-directory: bingo/bingo-elastic/python
      - name: Setup elasticsearch
        run: docker run -d -p 9200:9200 --env "discovery.type=single-node" --env "opendistro_security.disabled=true" --env "indices.query.bool.max_clause_count=4096" amazon/opendistro-for-elasticsearch:latest
      - name: Wait elastic is ready
        run: sleep 30s
      - name: Run tests
        run: poetry run pytest tests
        working-directory: bingo/bingo-elastic/python

  test_bingo_elastic_java_linux_x86_64:
    strategy:
      fail-fast: false
      matrix:
        java-version: [ 1.8, 1.11 ]
    runs-on: ubuntu-latest
    needs: build_indigo_wrappers
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Download wrappers
        uses: actions/download-artifact@v2
        with:
          name: indigo-java
          path: dist/
      - name: Install Indigo jars
        run: find dist -name "*.jar" -not -name "*javadoc*" -not -name "*sources*" -exec mvn org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file -Dfile={} \;
      - name: Build bingo-elastic
        run: mvn -B --file pom.xml -Dmaven.repo.local=/home/runner/.m2/repository clean test
        working-directory: bingo/bingo-elastic/java

  build_indigo_windows_mingw_x86_64:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - uses: msys2/setup-msys2@v2
        with:
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-make mingw-w64-x86_64-cmake git mingw-w64-x86_64-python mingw-w64-x86_64-python-pip mingw-w64-x86_64-python-wheel mingw-w64-x86_64-python-pillow
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Build native libs
        run: |
          mkdir build
          cd build
          cmake .. -G "MinGW Makefiles" -DBUILD_INDIGO_WRAPPERS=OFF -DPython3_ROOT_DIR=/mingw64
          cmake --build . --config Release --target all -- -j $(nproc) --output-sync
      - name: Test native libs
        run: |
          cd build
          ctest --verbose
      - name: Prepare integration tests
        run: |
          cd build
          # python -m pip install wheel
          cmake .. -G "MinGW Makefiles" -DBUILD_INDIGO_WRAPPERS=ON -DPython3_ROOT_DIR=/mingw64
          cmake --build . --config Release --target indigo-python -- -j $(nproc) --output-sync
      - name: Run integration tests
        run: |
          python api/tests/integration/test.py -j junit_report.xml -e todo -platform linux
      - name: Publish Test Report
        if: always()
        uses: mikepenz/action-junit-report@v1
        with:
          report_paths: 'junit_report.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: "windows-mingw_python_test_report"
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: indigo-libs-windows-mingw-x86_64
          path: dist

  build_indigo_wasm_ketcher:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags
      - name: Install Emcripten SDK
        uses: mymindstorm/setup-emsdk@v7
      - name: Build
        run: |
          mkdir build
          cd build
          emcmake cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --target indigo-ketcher-js -- -j $(nproc)
      - name : Test
        run: |
          cd build
          cmake --build . --config Release --target indigo-ketcher-js-test
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: indigo-wasm-ketcher
          path: build/bin/libindigo-ketcher.js

  build_indigo_utils_x86_64:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos, ubuntu, windows ]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Build utils Linux
        if: ${{ matrix.os == 'ubuntu' }}
        uses: docker://epmlsop/buildpack-centos7:latest
        with:
          args: >
            /bin/sh -c "
            mkdir build &&
            cd build &&
            cmake .. -DBUILD_INDIGO=OFF -DBUILD_INDIGO_WRAPPERS=OFF -DBUILD_INDIGO_UTILS=ON &&
            cmake --build . --config Release --target all -- -j $(nproc) &&
            ctest --verbose
            "
      - name: Build utils macOS
        if: ${{ matrix.os == 'macos' }}
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_INDIGO=OFF -DBUILD_INDIGO_WRAPPERS=OFF -DBUILD_INDIGO_UTILS=ON
          cmake --build . --config Release --target all -- -j $(sysctl -n hw.logicalcpu)
          ctest --verbose
      - name: Build utils Windows
        if: ${{ matrix.os == 'windows' }}
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_INDIGO=OFF -DBUILD_INDIGO_WRAPPERS=OFF -DBUILD_UTILS=ON
          cmake --build . --config Release --target ALL_BUILD
          ctest --verbose -C Release
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: indigo-utils-${{ fromJSON(env.OS_NAME_MAPPING_JSON)[matrix.os] }}-x86_64
          path: dist/utils

  build_bingo_oracle_linux_x86_64:
    runs-on: ubuntu-latest
    container: epmlsop/buildpack-centos7:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Build bingo-oracle
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_BINGO_ORACLE=ON -DBUILD_INDIGO=OFF -DBUILD_INDIGO_WRAPPERS=OFF
          cmake --build . --config Release --target package-bingo-oracle -- -j $(nproc)
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bingo-oracle-linux-x86_64
          path: dist/bingo-oracle*.tgz

  build_bingo_oracle_windows_mingw_x86_64:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - uses: msys2/setup-msys2@v2
        with:
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-make mingw-w64-x86_64-cmake git
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Build bingo-oracle
        run: |
          mkdir build
          cd build
          cmake .. -G "MinGW Makefiles" -DBUILD_BINGO_ORACLE=ON -DBUILD_INDIGO=OFF -DBUILD_INDIGO_WRAPPERS=OFF
          cmake --build . --config Release --target package-bingo-oracle -- -j $(nproc)
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bingo-oracle-windows-mingw-x86_64
          path: dist/bingo-oracle*.zip

  build_bingo_oracle_windows_msvc_x86_64:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Build bingo-oracle
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_BINGO_ORACLE=ON -DBUILD_INDIGO=OFF -DBUILD_INDIGO_WRAPPERS=OFF
          cmake --build . --config Release --target package-bingo-oracle
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bingo-oracle-windows-msvc-x86_64
          path: dist/bingo-oracle*.zip

  build_bingo_postgres_linux_x86_64:
    strategy:
      fail-fast: false
      matrix:
        postgres_major_version: [ 9.6, 10, 11, 12 ]
    runs-on: ubuntu-latest
    container: epmlsop/buildpack-centos7:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Install postgres server headers
        run: |
          case ${{ matrix.postgres_major_version }} in 12) pg_version=12;; 11) pg_version=11;; 10) pg_version=10;; 9.6) pg_version=96;; esac;
          yum install -y -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm yum-utils
          curl -OL https://download.postgresql.org/pub/repos/yum/RPM-GPG-KEY-PGDG
          rpm --import RPM-GPG-KEY-PGDG
          yumdownloader -y postgresql${pg_version}-devel
          rpm -i --nodeps postgresql${pg_version}*.rpm
      - name: Build bingo-postgres
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_BINGO_POSTGRES=ON -DBUILD_INDIGO=OFF -DBUILD_INDIGO_WRAPPERS=OFF
          cmake --build . --config Release --target package-bingo-postgres -- -j $(nproc)
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bingo-postgres-${{ matrix.postgres_major_version }}-linux-x86_64
          path: dist/bingo-postgres*.tgz

  build_bingo_postgres_windows_msvc_x86_64:
    strategy:
      fail-fast: false
      matrix:
        postgres_major_version: [ "9.6", "10", "11", "12" ]
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Setup Postgres
        run: |
          $pg_version = switch(${{ matrix.postgres_major_version }}) { "12" { "12.6" } "11" { "11.11" } "10" { "10.16" } "9.6" { "9.6.21" } }
          curl -O https://get.enterprisedb.com/postgresql/postgresql-${pg_version}-1-windows-x64-binaries.zip
          Expand-Archive postgresql-${pg_version}-1-windows-x64-binaries.zip
          mv postgresql-${pg_version}-1-windows-x64-binaries/pgsql pgsql
          cp bingo/postgres/patches/generic-msvc.h pgsql/include/server/port/atomics/generic-msvc.h
      - name: Build bingo-postgres
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_BINGO_POSTGRES=ON -DBUILD_INDIGO=OFF -DBUILD_INDIGO_WRAPPERS=OFF -DPostgreSQL_ROOT="$(resolve-path $pwd/../pgsql)"
          cmake --build . --config Release --target package-bingo-postgres
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bingo-postgres-${{ matrix.postgres_major_version }}-windows-x86_64
          path: dist/bingo-postgres*.zip

  build_bingo_postgres_macos_x86_64:
    strategy:
      fail-fast: false
      matrix:
        postgres_major_version: [ 9.6, 10, 11, 12 ]
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Setup Postgres
        run: |
          case ${{ matrix.postgres_major_version }} in 12) pg_version=12.6;; "11") pg_version=11.11;; 10) pg_version=10.16;; 9.6) pg_version=9.6.21;; esac;
          curl -O https://get.enterprisedb.com/postgresql/postgresql-${pg_version}-1-osx-binaries.zip
          unzip postgresql-${pg_version}-1-osx-binaries.zip
      - name: Build bingo-postgres
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_BINGO_POSTGRES=ON -DBUILD_INDIGO=OFF -DBUILD_INDIGO_WRAPPERS=OFF -DPostgreSQL_ROOT="$(dirname $PWD)/pgsql" -DPostgreSQL_ADDITIONAL_VERSIONS=${{ matrix.postgres_major_version }}
          cmake --build . --config Release --target package-bingo-postgres
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bingo-postgres-${{ matrix.postgres_major_version }}-macos-x86_64
          path: dist/bingo-postgres*.tgz

  build_bingo_sqlserver_windows_msvc_x86_64:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows ]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_BINGO_SQLSERVER=ON -DBUILD_INDIGO=OFF -DBUILD_INDIGO_WRAPPERS=OFF -DBUILD_INDIGO_UTILS=OFF
          cmake --build . --config Release --target package-bingo-sqlserver
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bingo-sqlserver-${{ matrix.os }}-x86_64
          path: dist/bingo-sqlserver*.zip

#  publish:
#    if: startsWith(github.ref, 'refs/tags/indigo-')
#    runs-on: ubuntu-latest
#    needs: [test_linux_python, test_linux_java, test_linux_dotnet, test_windows_python, test_macos_python]
#    container: epmlsop/indigo-tester:latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          lfs: true
#          fetch-depth: 500
#      - name: Git fetch tags
#        run: git fetch --tags -f
#      - name: Create folder for native libs
#        run: mkdir dist
#      - name: Download native shared libraries
#        uses: actions/download-artifact@v2
#        with:
#          name: indigo-native-shared-libs
#          path: dist/
#      - name: Update Wrappers version
#        run: python3 build_scripts/indigo-update-version.py
#      - name: Publish Python wheels to PyPI
#        env:
#          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
#        run: python3 build_scripts/indigo-make-by-libs.py --type=python --wrappers-arch=universal --publish
#      - name: Publish Java jars to Maven Central
#        env:
#          MAVEN_SETTINGS: ${{ secrets.MAVEN_SETTINGS }}
#          MAVEN_USER: ${{ secrets.MAVEN_USER }}
#          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
#          GPG_PRIVATE_KEY: ${{ secrets.MK_GPG_PRIVATE_KEY }}
#          GPG_PASSPHRASE: ${{ secrets.MK_GPG_PASSPHRASE }}
#        run: |
#          set -eux
#          apt install -y gnupg
#          mkdir /root/.m2
#          echo ${MAVEN_SETTINGS} > /root/.m2/settings.xml
#          echo ${GPG_PRIVATE_KEY} > gpg.key
#          gpg --batch --import gpg.key
#          rm gpg.key
#          python3 build_scripts/indigo-make-by-libs.py --type=java --wrappers-arch=universal --publish
#      - name: Publish .NET nupkg to Nuget
#        env:
#          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
#        run: python3 build_scripts/indigo-make-by-libs.py --type=dotnet --wrappers-arch=universal --publish
