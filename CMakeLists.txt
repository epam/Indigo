cmake_minimum_required(VERSION 3.9)

project(indigo-all LANGUAGES C CXX)

message(STATUS ${CMAKE_SYSTEM_PROCESSOR})

# Options

# Common options
option(ENABLE_TESTS "Enable CTest tests" ON)
option(BUILD_SELF_SUFFICIENT "Build without any system dependencies except for libc, otherwise require tinyxml, zlib, rapidjson, and cairo for renderer" ON)

# Indigo API options
option(BUILD_INDIGO "Build indigo shared library" ON)
option(BUILD_INDIGO_INCHI "Build Indigo InChI plugin shared library" ON)
option(BUILD_INDIGO_RENDERER "Build Indigo renderer plugin shared library" ON)
option(BUILD_BINGO_NOSQL "Build Indigo bingo-nosql plugin shared library" ON)
# Indigo API Bindings options
option(PREPARE_INDIGO_BINDINGS "Prepare native libraries folder for later building bindings. It could be prepared manually" ON)
option(BUILD_INDIGO_BINDINGS "Build all existing Indigo API bindings" ON)
option(BUILD_INDIGO_BINDINGS_PYTHON "Build Indigo API bindings to Python" ON)
option(BUILD_INDIGO_BINDINGS_JAVA "Build Indigo API bindings to Java" ON)
option(BUILD_INDIGO_BINDINGS_DOTNET "Build Indigo API bindings to .NET" ON)
# option(BUILD_INDIGO_BINDINGS_R "Build Indigo API bindings to R [WIP]" OFF)
# CLI utils options
option(BUILD_UTILS "Build indigo-cano, indigo-deco and indigo-depict utilities" ON)
# Bingo-SQL options
option(BUILD_BINGO_POSTGRES "Build Bingo Postgres cartridge" OFF)
option(BUILD_BINGO_MSSQL "Build Bingo MS SqlServer cartridge [WIP]" OFF)
option(BUILD_BINGO_ORACLE "Build Bingo Oracle cartridge [WIP]" OFF)
# Auto-set dependable options
if (BUILD_UTILS AND NOT BUILD_INDIGO_RENDERER)
    message(STATUS "Enabling BUILD_INDIGO and BUILD_INDIGO_RENDERER because it's required for BUILD_UTILS")
    set(BUILD_INDIGO_RENDERER ON)
    set(BUILD_INDIGO ON)
endif()
if (NOT BUILD_INDIGO)
    message(STATUS "Disabling BUILD_INDIGO_INCHI, BUILD_INDIGO_RENDERER, BUILD_BINGO_NOSQL and PREPARE_INDIGO_BINDINGS because BUILD_INDIGO=OFF")
    set(BUILD_INDIGO_INCHI OFF)
    set(BUILD_INDIGO_RENDERER OFF)
    set(BUILD_BINGO_NOSQL OFF)
    set(PREPARE_INDIGO_BINDINGS OFF)
endif()
if (BUILD_INDIGO_BINDINGS)
    message(STATUS "Enabling BUILD_INDIGO_BINDINGS_PYTHON, BUILD_INDIGO_BINDINGS_JAVA, BUILD_INDIGO_BINDINGS_DOTNET because BUILD_INDIGO_BINDINGS=ON")
    set(BUILD_INDIGO_BINDINGS_PYTHON ON)
    set(BUILD_INDIGO_BINDINGS_JAVA ON)
    set(BUILD_INDIGO_BINDINGS_DOTNET ON)
    # set(BUILD_INDIGO_BINDINGS_R ON)
endif()
if (EMSCRIPTEN)
    message(STATUS "Emscripten build: Disabling all except indigo-ketcher and indigo-wasm, and enabling them")
    set(ENABLE_TESTS OFF)
    set(BUILD_SELF_SUFFICIENT ON)
    set(BUILD_INDIGO ON)
    set(BUILD_INDIGO_INCHI ON)
    set(BUILD_INDIGO_RENDERER ON)
    set(BUILD_BINGO_NOSQL OFF)
    set(PREPARE_INDIGO_BINDINGS OFF)
    set(BUILD_INDIGO_BINDINGS OFF)
    set(BUILD_INDIGO_BINDINGS_PYTHON OFF)
    set(BUILD_INDIGO_BINDINGS_JAVA OFF)
    set(BUILD_INDIGO_BINDINGS_DOTNET OFF)
    # set(BUILD_INDIGO_BINDINGS_R OFF)
    set(BUILD_UTILS OFF)
    set(BUILD_BINGO_POSTGRES OFF)
    set(BUILD_BINGO_MSSQL OFF)
    set(BUILD_BINGO_ORACLE OFF)
endif()

# Set up compiler flags and other preparatory steps
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
include(setup)

# In subprojects we'll add dependencies for this pseudo-target to build all packages at once
add_custom_target(package)
add_subdirectory(third_party)
add_subdirectory(core)
add_subdirectory(api)
if (BUILD_BINGO_POSTGRES OR BUILD_BINGO_ORACLE OR BUILD_BINGO_MSSQL)
    add_subdirectory(bingo)
endif()
if (BUILD_UTILS)
    add_subdirectory(utils)
endif()

# Print all options and settings
message(STATUS "ENABLE_TESTS=${ENABLE_TESTS}")
message(STATUS "BUILD_SELF_SUFFICIENT=${BUILD_SELF_SUFFICIENT}")
message(STATUS "BUILD_INDIGO=${BUILD_INDIGO}")
message(STATUS "BUILD_INDIGO_INCHI=${BUILD_INDIGO_INCHI}")
message(STATUS "BUILD_INDIGO_RENDERER=${BUILD_INDIGO_RENDERER}")
message(STATUS "BUILD_BINGO_NOSQL=${BUILD_BINGO_NOSQL}")
message(STATUS "PREPARE_INDIGO_BINDINGS=${PREPARE_INDIGO_BINDINGS}")
message(STATUS "BUILD_INDIGO_BINDINGS=${BUILD_INDIGO_BINDINGS}")
message(STATUS "BUILD_INDIGO_BINDINGS_PYTHON=${BUILD_INDIGO_BINDINGS_PYTHON}")
message(STATUS "BUILD_INDIGO_BINDINGS_JAVA=${BUILD_INDIGO_BINDINGS_JAVA}")
message(STATUS "BUILD_INDIGO_BINDINGS_DOTNET=${BUILD_INDIGO_BINDINGS_DOTNET}")
# message(STATUS "BUILD_INDIGO_BINDINGS_R=${BUILD_INDIGO_BINDINGS_R}")
message(STATUS "BUILD_UTILS=${BUILD_UTILS}")
message(STATUS "BUILD_BINGO_POSTGRES=${BUILD_BINGO_POSTGRES}")
message(STATUS "BUILD_BINGO_MSSQL=${BUILD_BINGO_MSSQL}")
message(STATUS "BUILD_BINGO_ORACLE=${BUILD_BINGO_ORACLE}")
# Show C and CXX flags
message(STATUS "CMAKE_C_FLAGS=${CMAKE_C_FLAGS}")
message(STATUS "CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")
if (CMAKE_BUILD_TYPE STREQUAL Debug)
    message(STATUS "CMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG}")
    message(STATUS "CMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}")
elseif(CMAKE_BUILD_TYPE STREQUAL Release)
    message(STATUS "CMAKE_C_FLAGS_RELEASE=${CMAKE_C_FLAGS_RELEASE}")
    message(STATUS "CMAKE_CXX_FLAGS_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}")
endif()
message(STATUS "CMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
message(STATUS "CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
