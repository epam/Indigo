# Get package location hint from environment variable (if any)
if(NOT TinyXML2_ROOT_DIR AND DEFINED ENV{TinyXML2_ROOT_DIR})
    set(TinyXML2_ROOT_DIR "$ENV{TinyXML2_ROOT_DIR}" CACHE PATH
            "TinyXML2 base directory location (optional, used for nonstandard installation paths)")
endif()

# Search path for nonstandard package locations
if(TinyXML2_ROOT_DIR)
    set(TinyXML2_INCLUDE_PATH PATHS "${TinyXML2_ROOT_DIR}/include" NO_DEFAULT_PATH)
    set(TinyXML2_LIBRARY_PATH PATHS "${TinyXML2_ROOT_DIR}/lib"     NO_DEFAULT_PATH)
endif()

# Find headers and libraries
find_path(TinyXML2_INCLUDE_DIR NAMES tinyxml2.h PATH_SUFFIXES "tinyxml2" ${TinyXML2_INCLUDE_PATH})
find_library(TinyXML2_LIBRARY  NAMES tinyxml2   PATH_SUFFIXES "tinyxml2" ${TinyXML2_LIBRARY_PATH})

if (TinyXML2_INCLUDE_DIR)
    if (EXISTS "${TinyXML2_INCLUDE_DIR}/tinyxml2.h")
        FILE(READ "${TinyXML2_INCLUDE_DIR}/tinyxml2.h" TinyXML2_VERSION_CONTENT)

        STRING(REGEX MATCH "const int TIXML_MAJOR_VERSION = ([0-9]+)" _dummy "${TinyXML2_VERSION_CONTENT}")
        SET(TinyXML2_VERSION_MAJOR "${CMAKE_MATCH_1}")

        STRING(REGEX MATCH "const int TIXML_MINOR_VERSION = ([0-9]+)" _dummy "${TinyXML2_VERSION_CONTENT}")
        SET(TinyXML2_VERSION_MINOR "${CMAKE_MATCH_1}")

        STRING(REGEX MATCH "const int TIXML_PATCH_VERSION = ([0-9]+)" _dummy "${TinyXML2_VERSION_CONTENT}")
        SET(TinyXML2_VERSION_PATCH "${CMAKE_MATCH_1}")

        SET(TinyXML2_VERSION "${TinyXML2_VERSION_MAJOR}.${TinyXML2_VERSION_MINOR}.${TinyXML2_VERSION_PATCH}")
    endif ()
endif ()

mark_as_advanced(TinyXML2_INCLUDE_DIR
        TinyXML2_LIBRARY)

# Output variables generation
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(TinyXML2 REQUIRED_VARS TinyXML2_LIBRARY TinyXML2_INCLUDE_DIR
                                          VERSION_VAR TinyXML2_VERSION)

set(TinyXML2_FOUND ${TINYXML_FOUND}) # Enforce case-correctness: Set appropriately cased variable...
unset(TINYXML_FOUND) # ...and unset uppercase variable generated by find_package_handle_standard_args

if(TinyXML2_FOUND)
    set(TinyXML2_INCLUDE_DIRS ${TinyXML2_INCLUDE_DIR})
    set(TinyXML2_LIBRARIES ${TinyXML2_LIBRARY})
endif()


if(TinyXML2_FOUND)
    if(NOT TARGET TinyXML2::TinyXML2)
        add_library(TinyXML2::TinyXML2 UNKNOWN IMPORTED)
        set_target_properties(TinyXML2::TinyXML2 PROPERTIES
                INTERFACE_INCLUDE_DIRECTORIES "${TinyXML2_INCLUDE_DIRS}")

        if(TinyXML2_LIBRARY_RELEASE)
            set_property(TARGET TinyXML2::TinyXML2 APPEND PROPERTY
                    IMPORTED_CONFIGURATIONS RELEASE)
            set_target_properties(TinyXML2::TinyXML2 PROPERTIES
                    IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "C"
                    IMPORTED_LOCATION_RELEASE "${TinyXML2_LIBRARY_RELEASE}")
        endif()

        if(TinyXML2_LIBRARY_DEBUG)
            set_property(TARGET TinyXML2::TinyXML2 APPEND PROPERTY
                    IMPORTED_CONFIGURATIONS DEBUG)
            set_target_properties(TinyXML2::TinyXML2 PROPERTIES
                    IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "C"
                    IMPORTED_LOCATION_DEBUG "${TinyXML2_LIBRARY_DEBUG}")
        endif()

        if(NOT TinyXML2_LIBRARY_RELEASE AND NOT TinyXML2_LIBRARY_DEBUG)
            set_target_properties(TinyXML2::TinyXML2 PROPERTIES
                    IMPORTED_LINK_INTERFACE_LANGUAGES "C"
                    IMPORTED_LOCATION "${TinyXML2_LIBRARY}")
        endif()
    endif()
endif()
