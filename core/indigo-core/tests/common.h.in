#cmakedefine DATA_PATH "@DATA_PATH@"

#include <string>

#include <gtest/gtest.h>

#include <molecule/molecule.h>

#ifdef __GNUC__
#include "HeapWatcher.hpp"
#endif

#define METHANE "C"
#define BENZENE "C1=CC=CC=C1"
#define BENZENE_AROMATIC "c1ccccc1"
#define CAFFEINE "CN1C=NC2=C1C(=O)N(C(=O)N2C)C"
#define SULFASALAZINE "C1=CC=NC(=C1)NS(=O)(=O)C2=CC=C(C=C2)N=NC3=CC(=C(C=C3)O)C(=O)O"

void leaks_start_watch()
{
#ifdef __GNUC__
    SEFUtility::HeapWatcher::get_heap_watcher().start_watching();
#endif
}

void leaks_stop_watch()
{
#ifdef __GNUC__
#define GTEST_COUT std::cerr << "[          ] [ INFO ]"
    auto leaks(SEFUtility::HeapWatcher::get_heap_watcher().stop_watching());
    GTEST_COUT << "allocations:" << leaks.open_allocations().size() << std::endl;
    ASSERT_FALSE(leaks.has_leaks());
#endif
}

namespace indigo
{
    class IndigoCoreTest : public ::testing::Test
    {
    protected:
        static void loadMolecule(const char* buf, Molecule& molecule);
        static void loadQueryMolecule(const char* buf, QueryMolecule& queryMolecule);
        bool substructureMatch(const char* targetString, const char* queryString);
        std::string smartsLoadSaveLoad(const std::string& queryString);

        static std::string dataPath(const char* dataPathSuffix);
    };
}
